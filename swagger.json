{
  "openapi": "3.0.3",
  "info": {
    "title": "Dokoopy 1.0.0",
    "description": "API for charity landing page of 57th brigade.\n\nThis Server based on the OpenAPI 3.0 specification\n\nSome useful links:\n- [The Dokoopy-backend repository](https://github.com/baza-trainee/dokoopy-backend)",
    "contact": {
      "name": "API developers",
      "email": ""
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5001/api",
      "description": "Development Server"
    },
    {
      "url": "https://dokoopy.onrender.com/api",
      "description": "Production Server"
    },
    {
      "url": "https://dokoopy-pr-19.onrender.com/api",
      "description": "Test Server for feature get-main-content"
    }
  ],
  "consumes": ["application/json", "multipart/form-data", "text/html"],
  "produces": ["application/json", "multipart/form-data", "text/html"],
  "tags": [
    {
      "name": "Main",
      "description": "Main page"
    },
    {
      "name": "Auth",
      "description": "Administration panel"
    },
    {
      "name": "Projects",
      "description": "Projects block"
    },
    {
      "name": "Bank",
      "description": "Bank block"
    },
    {
      "name": "Heroes",
      "description": "Heroes block"
    },
    {
      "name": "Reports",
      "description": "Reports block"
    },
    {
      "name": "Contacts",
      "description": "Contacts block"
    },
    {
      "name": "Partners",
      "description": "Partners block"
    }
  ],
  "paths": {
    "/auth/admin/login": {
      "post": {
        "summary": "Login admin user to Administration panel",
        "tags": ["Auth"],
        "description": "Returns new token with expiration time - 1 hour",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "mail@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "MySuperSecretPassword"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully token signed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/login"
                }
              }
            }
          },
          "400": {
            "description": "Wrong email or password"
          }
        }
      }
    },
    "/auth/admin/logout": {
      "post": {
        "summary": "Logout user",
        "tags": ["Auth"],
        "description": "Removes active token from server. You need to add token in headers of request",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJpYXQiOjE2OTM5Mjc5ODgsImV4cCI6MTY5MzkzMTU4OH0.E6QuahI22Yo_fOMvSieL2lWY3ePHQtxyP0ZBghK2-ac"
            },
            "description": "Active token"
          }
        ],
        "responses": {
          "200": {
            "description": "Logout success"
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/auth/admin/current": {
      "get": {
        "summary": "Check the active user",
        "tags": ["Auth"],
        "description": "Returns email of active user. You need to add token in headers of request.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJpYXQiOjE2OTM5Mjc5ODgsImV4cCI6MTY5MzkzMTU4OH0.E6QuahI22Yo_fOMvSieL2lWY3ePHQtxyP0ZBghK2-ac"
            },
            "description": "Active token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCurrentUser"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/auth/admin/forgot-password": {
      "post": {
        "summary": "Send forgot-password email to the user",
        "tags": [
          "Auth"
        ],
        "description": "Send the email with link for resetting password",
        "operationId": "forgotPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "String",
                  "example": "Reset password email sent"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/admin/reset-password/{resetToken}": {
      "post": {
        "summary": "Reset password",
        "tags": [
          "Auth"
        ],
        "description": "Write new password to the Database",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "resetToken",
            "in": "params",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backend-generated unique resetToken"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "String",
                  "example": "Reset password is succesful"
                }
              }
            }
          },
          "403": {
            "description": "Reset token is expired"
          }
        }
      }
    },
    "/projects/admin": {
      "post": {
        "summary": "Add new project",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add new project",
        "operationId": "addProject",
        "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AddProjectRequest"
                }
              }
            }
        },
        "responses": {
          "201": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddProjectResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          },
          "500": {
            "description": "File too large"
          }
        }
      },
      "get": {
        "summary": "Get all projects for the admin panel",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all project for the admin panel",
        "operationId": "getAllProjects",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllProjectsResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/projects/admin/{id}": {
      "patch": {
        "summary": "Update project info",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update project information in the database",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "example": "6490564f8f85c705511c5de2",
            "schema": {
              "type": "string",
              "description": "Backend-generated unique identifier"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProjectResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "File too large"
          }
        }
      },
      "delete": {
          "tags": [
            "Projects"
          ],
          "security": [
            {
              "Bearer": []
            }
          ],
          "summary": "Delete the project",
          "description": "Delete the project from the database",
          "operationId": "deleteProject",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of project that needs to be deleted",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Delete the project with the specified ID"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Project deleted"
            },
            "401": {
              "description": "Not authorized"
            }
          }
      }
    },
    "/projects": {
      "get": {
        "summary": "Get all projects for the main page",
        "tags": [
          "Projects"
        ],
        "description": "Get all project for the main page",
        "operationId": "getAllProjects",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllProjectsResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/partners/admin": {
      "post": {
        "summary": "Add new partner",
        "tags": [
          "Partners"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add new partner",
        "operationId": "addPartner",
        "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AddPartnerRequest"
                }
              }
            }
        },
        "responses": {
          "201": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddPartnerResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          },
          "500": {
            "description": "File too large"
          }
        }
      },
      "get": {
        "summary": "Get all partners for the admin panel",
        "tags": [
          "Partners"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all partners for the admin panel",
        "operationId": "getAllPartners",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllPartnersResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/partners/admin/{id}": {
      "patch": {
        "summary": "Update partner info",
        "tags": [
          "Partners"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update partner information in the database",
        "operationId": "updatePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "example": "6490564f8f85c705511c5de2",
            "schema": {
              "type": "string",
              "description": "Backend-generated unique identifier"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartnerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPartnerResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "File too large"
          }
        }
      },
      "delete": {
          "tags": [
            "Partners"
          ],
          "security": [
            {
              "Bearer": []
            }
          ],
          "summary": "Delete the partner",
          "description": "Delete the partner from the database",
          "operationId": "deletePartner",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of partner that needs to be deleted",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Delete the partner with the specified ID"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Partner deleted"
            },
            "401": {
              "description": "Not authorized"
            }
          }
      }
    },
    "/partners": {
      "get": {
        "summary": "Get all partners for the main page",
        "tags": [
          "Partners"
        ],
        "description": "Get all partners for the main page",
        "operationId": "getAllPartners",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllPartnersResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/contacts/admin/{id}": {
      "patch": {
        "summary": "Update contacts info",
        "tags": [
          "Contacts"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update contacts info in the database",
        "operationId": "updateContact",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "dokoopy@gmail.com"
                  },
                  "telegram": {
                    "type": "string",
                    "example": "@dokoopy"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContactResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/contacts/admin": {
      "get": {
        "summary": "Get all contacts for the admin panel",
        "tags": [
          "Contacts"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all contacts for the admin panel",
        "operationId": "getAllContacts",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllContactsResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "summary": "Get all contacts for the main page",
        "tags": [
          "Contacts"
        ],
        "description": "Get all contacts for the main page",
        "operationId": "getAllContacts",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllContactsResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/reports/admin": {
      "post": {
        "summary": "Add new report",
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add new report",
        "operationId": "addReport",
        "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AddReportRequest"
                }
              }
            }
        },
        "responses": {
          "201": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddReportResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      },
      "get": {
        "summary": "Get all reports for the admin panel",
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all reports for the admin panel",
        "operationId": "getAllReports",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllReportsResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/reports/admin/{id}": {
      "patch": {
        "summary": "Update report",
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update report in the database",
        "operationId": "updateReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "example": "6490564f8f85c705511c5de2",
            "schema": {
              "type": "string",
              "description": "Backend-generated unique identifier"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddReportResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "File too large"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "summary": "Get all reports for the main page",
        "tags": [
          "Reports"
        ],
        "description": "Get all reports for the main page",
        "operationId": "getAllReports",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllReportsResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/hero/admin": {
      "post": {
        "summary": "Add new hero",
        "tags": [
          "Heroes"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add new hero",
        "operationId": "addHero",
        "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AddHeroRequest"
                }
              }
            }
        },
        "responses": {
          "201": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddHeroResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          },
          "500": {
            "description": "File too large"
          }
        }
      },
      "get": {
        "summary": "Get all heroes for the admin panel",
        "tags": [
          "Heroes"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all heroes for the admin panel",
        "operationId": "getAllHeroes",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllHeroesResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/hero/admin/{id}": {
      "patch": {
        "summary": "Update hero info",
        "tags": [
          "Heroes"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update hero information in the database",
        "operationId": "updateHero",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "example": "6490564f8f85c705511c5de2",
            "schema": {
              "type": "string",
              "description": "Backend-generated unique identifier"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHeroRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddHeroResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "File too large"
          }
        }
      },
      "delete": {
          "tags": [
            "Heroes"
          ],
          "security": [
            {
              "Bearer": []
            }
          ],
          "summary": "Delete the hero",
          "description": "Delete the hero from the database",
          "operationId": "deleteHero",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of hero that needs to be deleted",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Delete the hero with the specified ID"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Hero deleted"
            },
            "401": {
              "description": "Not authorized"
            }
          }
      }
    },
    "/hero": {
      "get": {
        "summary": "Get all heroes for the main page",
        "tags": [
          "Heroes"
        ],
        "description": "Get all heroes for the main page",
        "operationId": "getAllHeroes",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllHeroesResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/bank/admin/{id}": {
      "patch": {
        "summary": "Update jar link",
        "tags": [
          "Bank"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update jar link in the database",
        "operationId": "updateBank",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string",
                    "example": "monobank_link"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBankLinkResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      },
      "get": {
        "summary": "Get jar link for the admin panel",
        "tags": [
          "Bank"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get jar link for the admin panel",
        "operationId": "getAllRequisites",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllRequisitesResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    },
    "/bank": {
      "get": {
        "summary": "Get jar link for the main page",
        "tags": [
          "Bank"
        ],
        "description": "Get jar link for the main page",
        "operationId": "getAllRequisites",
        "responses": {
          "200": {
              "description": "success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllRequisitesResponse"
                  }
                }
              }
          },
          "401": {
              "description": "Not authorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Login": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "New token to unlock private routes in administration panel",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJpYXQiOjE2OTM5Mjc5ODgsImV4cCI6MTY5MzkzMTU4OH0.E6QuahI22Yo_fOMvSieL2lWY3ePHQtxyP0ZBghK2-ac"
          }
        }
      },
      "GetCurrentUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of active user",
            "example": "mail@mail.com"
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user email",
            "example": "user@gmail.com"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "new password",
            "example": "fhdjhfjshh_123"
          }
        }
      },
      "AddProjectRequest": {
        "type": "object",
        "required": [
          "title",
          "title_eng",
          "description",
          "description_eng",
          "imageURL"
        ],
        "properties": {
          "title": {
              "type": "string",
              "example": "Проєкт 1"
          },
          "title_eng": {
            "type": "string",
            "example": "Project 1"
          },
            "description": {
              "type": "string",
              "example": "Це опис проєкту"
          },
            "description_eng": {
              "type": "string",
              "example": "This is the project description"
          },
            "imageURL": {
              "type": "string",
              "format": "binary"
          }
        }
      },
      "AddProjectResponse": {
          "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Backend-generated unique identifier",
                "example": "GGHJlhkj668__hjkhjkhh$%"
              },
              "title": {
                "type": "string",
                "description": "Project title in ukrainian",
                "example": "Проєкт 1"
              },
              "title_eng": {
                "type": "string",
                "description": "Project title in english",
                "example": "Project 1"
              },
              "description": {
                "type": "string",
                "description": "Project description",
                "example": "Це опис проекту"
              },
              "description_eng": {
                "type": "string",
                "example": "This is the project description"
              },
              "imageURL": {
                  "type": "string",
                  "description": "Project image url",
                  "example": "https://res.cloudinary.com/dwvdhkbkm/image/upload/v1697058515/dokoopy/o1tvpkyfeygpazxhuqba.jpg"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-05-15T10:51:30.531Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-05-15T10:51:30.531Z"
              }
          }
      },
      "UpdateProjectRequest": {
                "type": "object",
                "properties": {
                    "title": {
                      "type": "string",
                      "example": "Проєкт 1"
                    },
                    "title_eng": {
                      "type": "string",
                      "example": "Project 1"
                    },
                    "description": {
                      "type": "string",
                      "example": "Це перший проєкт"
                    },
                    "description_eng": {
                      "type": "string",
                      "example": "This is the first project"
                    },
                    "imageURL": {
                        "type": "string",
                        "format": "binary"
                    }
                }
      },
      "AddPartnerRequest": {
        "type": "object",
        "required": [
          "title",
          "link",
          "imageURL"
        ],
        "properties": {
          "title": {
              "type": "string",
              "example": "Partner 1"
          },
            "link": {
              "type": "string",
              "example": "https://olx.ua"
          },
            "imageURL": {
              "type": "string",
              "format": "binary"
          }
        }
      },
      "AddPartnerResponse": {
          "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Backend-generated unique identifier",
                "example": "GGHJlhkj668__hjkhjkhh$%"
              },
              "title": {
                "type": "string",
                "description": "Partner title",
                "example": "Partner 1"
              },
              "link": {
                "type": "string",
                "description": "Partner link",
                "example": "https://olx.ua"
              },
              "imageURL": {
                  "type": "string",
                  "description": "Partner image url",
                  "example": "partners\\qtc7YIPFu7y55n-hrA0Nl_IMG_7842.JPG"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-05-15T10:51:30.531Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-05-15T10:51:30.531Z"
              }
          }
      },
      "UpdatePartnerRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Partner 1"
                    },
                    "link": {
                        "type": "string",
                        "example": "https://olx.ua"
                    },
                    "imageURL": {
                        "type": "string",
                        "format": "binary"
                    }
            }
      },
      "UpdateContactResponse": {
        "type": "object",
            "properties": {
                "_id": {
                  "type": "string",
                  "description": "Backend-generated unique identifier",
                  "example": "6525c81a0337252aedd6124d"
                },
                "email": {
                  "type": "string",
                  "example": "dokoopy@gmail.com"
                },
                "telegram": {
                  "type": "string",
                  "example": "@dokoopy"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-10-09T22:37:14.832Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-10-09T22:37:14.832Z"
                }
            }
      },
      "AddReportRequest": {
        "type": "object",
        "required": [
          "reportURL"
        ],
        "properties": {
          "reportURL": {
              "type": "string",
              "format": "binary"
          }
        }
      },
      "AddReportResponse": {
          "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Backend-generated unique identifier",
                "example": "GGHJlhkj668__hjkhjkhh$%"
              },
              "reportURL": {
                "type": "string",
                "description": "Report link",
                "example": "reports\\eYLKBYxgM-MVDo31zUgnz_test.pdf"
              }
          }
      },
      "UpdateReportRequest": {
        "type": "object",
        "required": [
          "reportURL"
        ],
        "properties": {
          "reportURL": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "AddHeroRequest": {
        "type": "object",
        "required": [
          "title",
          "description",
          "description_eng",
          "imageURL"
        ],
        "properties": {
          "title": {
              "type": "string",
              "example": "Hero 1"
          },
          "description": {
              "type": "string",
              "example": "Це опис слайдера"
          },
          "description_eng": {
            "type": "string",
            "example": "This is the super hero description"
        },
          "imageURL": {
              "type": "string",
              "format": "binary"
          }
        }
      },
      "AddHeroResponse": {
          "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Backend-generated unique identifier",
                "example": "GGHJlhkj668__hjkhjkhh$%"
              },
              "title": {
                "type": "string",
                "description": "Project title",
                "example": "Hero 1"
              },
              "description": {
                "type": "string",
                "description": "Project description",
                "example": "Це опис слайдера"
              },
              "description_eng": {
                "type": "string",
                "description": "Project description",
                "example": "This is the super hero description"
              },
              "imageURL": {
                  "type": "string",
                  "description": "Project image url",
                  "example": "heroes\\qtc7YIPFu7y55n-hrA0Nl_IMG_7842.JPG"
              },
              "createdAt": {
                "type": "string",
                "example": "2023-05-15T10:51:30.531Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2023-05-15T10:51:30.531Z"
              }
          }
      },
      "UpdateHeroRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Hero 1"
                    },
                    "description": {
                        "type": "string",
                        "example": "Це опис слайдера"
                    },
                    "description_eng": {
                        "type": "string",
                        "example": "This is the super hero description"
                    },
                    "imageURL": {
                        "type": "string",
                        "format": "binary"
                    }
                }
      },
      "UpdateBankLinkResponse": {
        "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Backend-generated unique identifier",
              "example": "mono_link"
            },
            "link": {
              "type": "string",
              "example": "mono_link"
            }
          }
      },
      "GetAllProjectsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Backend-generated unique identifier",
                  "example": "GGHJlhkj668__hjkhjkhh$%"
                },
                "title": {
                  "type": "string",
                  "description": "The title of project",
                  "example": "Проєкт 1"
                },
                "title_eng": {
                  "type": "string",
                  "description": "The title of project",
                  "example": "Project 1"
                },
                "description": {
                  "type": "string",
                  "description": "The description of project",
                  "example": "Це перший проєкт"
                },
                "description_eng": {
                  "type": "string",
                  "description": "The description of project",
                  "example": "This is the first project"
                },
                "imageURL": {
                  "type": "string",
                  "description": "Link on project's photo",
                  "example": "projects\\-SWk2ERNOBwlHLgJVpW07_IMG_7856.JPG"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-09-06T13:06:19.775Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-09-06T13:06:19.775Z"
                }
              }
            },
            "description": "List of projects found by request"
          }
        }
      },
      "GetAllPartnersResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Backend-generated unique identifier",
                  "example": "GGHJlhkj668__hjkhjkhh$%"
                },
                "title": {
                  "type": "string",
                  "description": "The name of partner",
                  "example": "Partner 1"
                },
                "link": {
                  "type": "string",
                  "description": "The link on partner site",
                  "example": "https://baza-trainee.tech/ua"
                },
                "imageURL": {
                  "type": "string",
                  "description": "Link on project's photo",
                  "example": "partners\\-SWk2ERNOBwlHLgJVpW07_IMG_7856.JPG"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-09-06T13:06:19.775Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-09-06T13:06:19.775Z"
                }
              }
            },
            "description": "List of partners found by request"
          }
        }
      },
      "GetAllReportsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Backend-generated unique identifier",
                  "example": "GGHJlhkj668__hjkhjkhh$%"
                },
                "reportURL": {
                  "type": "string",
                  "description": "Link on project's photo",
                  "example": "https://res.cloudinary.com/dwvdhkbkm/image/upload/v1697059048/dokoopy/vlxpr3kfm2fwzjoungpo.pdf"
                }
              }
            },
            "description": "List of reports found by request"
          }
        }
      },
      "GetAllContactsResponse": {  
        "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Backend-generated unique identifier",
              "example": "6525c81a0337252aedd6124d"
            },
            "email": {
              "type": "string",
              "example": "dokoopy@gmail.com"
            },
            "telegram": {
              "type": "string",
              "example": "@dokoopy"
            }
        }
      },
      "GetAllRequisitesResponse": {  
        "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Backend-generated unique identifier",
              "example": "6525c81a0337252aedd6124d"
            },
            "link": {
              "type": "string",
              "example": "mono_link"
            }
        }
      },
      "GetAllHeroesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Backend-generated unique identifier",
                  "example": "GGHJlhkj668__hjkhjkhh$%"
                },
                "title": {
                  "type": "string",
                  "description": "The title of hero",
                  "example": "Hero 1"
                },
                "description": {
                  "type": "string",
                  "description": "The description of hero",
                  "example": "Це перший слайдер"
                },
                "description_eng": {
                  "type": "string",
                  "description": "The description of hero",
                  "example": "This is the first hero slide"
                },
                "imageURL": {
                  "type": "string",
                  "description": "Link on hero's photo",
                  "example": "https://res.cloudinary.com/dwvdhkbkm/image/upload/v1697059077/dokoopy/gr5fchy2vggygzpxnk24.jpg"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-09-06T13:06:19.775Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-09-06T13:06:19.775Z"
                }
              }
            },
            "description": "List of projects found by request"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}